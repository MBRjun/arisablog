{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 \u4e00\u4e2a\u5927\u56db\u5b66\u751f\u5199\u7684\u535a\u5ba2\uff0c\u76ee\u524d\u5341\u5206\u7b80\u964b\u3002\u8be5\u535a\u5ba2\u5747\u4e3a\u5b9e\u9a8c\u6027\u5185\u5bb9\uff0c\u4e0d\u4ee3\u8868\u4ee5\u540e\u6700\u7ec8\u6210\u54c1\u3002 \u4f7f\u7528\u4ee5\u4e0b\u5de5\u5177\u6784\u5efa MkDocs Material for MkDocs mkdocs-blogging-plugin","title":"\u9996\u9875"},{"location":"#_1","text":"\u4e00\u4e2a\u5927\u56db\u5b66\u751f\u5199\u7684\u535a\u5ba2\uff0c\u76ee\u524d\u5341\u5206\u7b80\u964b\u3002\u8be5\u535a\u5ba2\u5747\u4e3a\u5b9e\u9a8c\u6027\u5185\u5bb9\uff0c\u4e0d\u4ee3\u8868\u4ee5\u540e\u6700\u7ec8\u6210\u54c1\u3002 \u4f7f\u7528\u4ee5\u4e0b\u5de5\u5177\u6784\u5efa MkDocs Material for MkDocs mkdocs-blogging-plugin","title":"\u9996\u9875"},{"location":"tags/","text":"{{ tag_content }}","title":"\u6807\u7b7e"},{"location":"toc/","text":"{{ blog_content }}","title":"\u76ee\u5f55"},{"location":"blog/2022/220406-nginx-stream/","tags":["nginx","arcaea","stream"],"text":"\u80cc\u666f \u5e2e aw \u505a AUA \u8f6c\u53d1\u8282\u70b9\u7684\u65f6\u5019\u9047\u5230\u4e86\u8fd9\u4e2a\u9700\u6c42\uff0c\u56e0\u4e3a AUA \u9700\u8981\u9891\u7e41\u5411 616 \u8bf7\u6c42 API\uff0c\u4f46\u662f 616 \u5bf9 \u540c\u4e00\u4e2a IP \u7684\u8bf7\u6c42\u6570\u91cf\u6709\u9650\u5236\uff0c\u6240\u4ee5 AUA \u9700\u8981\u5927\u91cf\u7684\u8f6c\u53d1\u8282\u70b9\u6765\u7ef4\u6301\u4f7f\u7528\u3002 aw \u7684\u5efa\u8bae\u662f\u7528 socat (Linux server) \u6216\u8005 netsh (Windows server) Linux server Windows server socat -d TCP4-LISTEN:6161,reuseaddr,fork TCP4:arcapi-v2.lowiro.com:443 netsh interface portproxy add v4tov4 listenport=6161 connectaddress=arcapi-v2.lowiro.com connectport=443 \u95ee\u9898\u662f\u6211\u670d\u52a1\u5668\u4e0a\u5df2\u7ecf\u6709 nginx \u4e86\uff0c\u4e0d\u662f\u5f88\u60f3\u88c5 socat \u3002 \u521d\u6b21\u5c1d\u8bd5 \u4e86\u89e3\u5230 nginx \u4ece 1.9.0 \u5f00\u59cb\uff0c\u65b0\u589e\u52a0\u4e86\u4e00\u4e2a stream \u6a21\u5757\uff0c\u7528\u6765\u5b9e\u73b0\u56db\u5c42\u534f\u8bae\u7684\u8f6c\u53d1\u3001\u4ee3\u7406\u6216\u8005\u8d1f\u8f7d\u5747\u8861\u7b49\u3002\u7528\u6cd5\u662f\u76f4\u63a5\u5728 nginx.conf \u4e2d\u914d\u7f6e stream \u5b57\u6bb5\u3002 \u4f46\u662f\u5b9e\u9645\u914d\u7f6e\u5b8c\u6210\u540e\u53d1\u73b0\uff0cnginx \u5e76\u4e0d\u8ba4\u8bc6 stream \u6a21\u5757\u3002\u4f7f\u7528 nginx -t \u68c0\u67e5\u914d\u7f6e\u65e0\u6cd5\u901a\u8fc7\u3002\u62a5\u9519\u63d0\u793a unknown directive \"stream\" in /etc/nginx/nginx.conf \u3002 \u540e\u6765\u4e86\u89e3\u5230\uff0c\u5982\u679c\u9700\u8981\u4f7f nginx \u5185\u7f6e\u652f\u6301 stream \u6a21\u5757\uff0c\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u6307\u5b9a --with-stream \u9009\u9879\u3002\u5373 ./configure --with-stream \u5b98\u7f51\u7684\u8bf4\u6cd5 \u8fd9\u4e2a\u65b9\u6cd5\u5b9e\u5c5e\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u8fd8\u8981\u91cd\u88c5 nginx\u3002 \u89e3\u51b3\u65b9\u6848 \u4ece\u8fd9\u7bc7\u6587\u7ae0\u4e86\u89e3\u5230\u4e86\u4e0d\u7528\u91cd\u65b0\u7f16\u8bd1\u4e5f\u80fd\u652f\u6301 stream \u6a21\u5757\u7684\u65b9\u6cd5\uff1a unknown directive \"stream\" in /etc/nginx/nginx.conf:86 - Server Fault \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u5728\u7f16\u8bd1\u65f6\u6307\u5b9a --with-stream \u9009\u9879\uff0cnginx \u4e5f\u4f1a\u5c06 stream \u6a21\u5757\u7f16\u8bd1\u8fdb\u6765\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8ba9 nginx \u9ed8\u8ba4\u652f\u6301\uff0c\u800c\u662f\u9700\u8981\u6211\u4eec\u81ea\u884c\u5bfc\u5165\uff0c\u5373\uff1a load_module /usr/lib/nginx/modules/ngx_stream_module.so ; \u5982\u6b64\u4e00\u6765\u4fbf\u80fd\u6b63\u5e38\u4f7f\u7528 stream \u6a21\u5757\u3002","title":"nginx \u5982\u4f55\u8bbe\u7f6e stream \u8f6c\u53d1"},{"location":"blog/2022/220406-nginx-stream/#_1","text":"\u5e2e aw \u505a AUA \u8f6c\u53d1\u8282\u70b9\u7684\u65f6\u5019\u9047\u5230\u4e86\u8fd9\u4e2a\u9700\u6c42\uff0c\u56e0\u4e3a AUA \u9700\u8981\u9891\u7e41\u5411 616 \u8bf7\u6c42 API\uff0c\u4f46\u662f 616 \u5bf9 \u540c\u4e00\u4e2a IP \u7684\u8bf7\u6c42\u6570\u91cf\u6709\u9650\u5236\uff0c\u6240\u4ee5 AUA \u9700\u8981\u5927\u91cf\u7684\u8f6c\u53d1\u8282\u70b9\u6765\u7ef4\u6301\u4f7f\u7528\u3002 aw \u7684\u5efa\u8bae\u662f\u7528 socat (Linux server) \u6216\u8005 netsh (Windows server) Linux server Windows server socat -d TCP4-LISTEN:6161,reuseaddr,fork TCP4:arcapi-v2.lowiro.com:443 netsh interface portproxy add v4tov4 listenport=6161 connectaddress=arcapi-v2.lowiro.com connectport=443 \u95ee\u9898\u662f\u6211\u670d\u52a1\u5668\u4e0a\u5df2\u7ecf\u6709 nginx \u4e86\uff0c\u4e0d\u662f\u5f88\u60f3\u88c5 socat \u3002","title":"\u80cc\u666f"},{"location":"blog/2022/220406-nginx-stream/#_2","text":"\u4e86\u89e3\u5230 nginx \u4ece 1.9.0 \u5f00\u59cb\uff0c\u65b0\u589e\u52a0\u4e86\u4e00\u4e2a stream \u6a21\u5757\uff0c\u7528\u6765\u5b9e\u73b0\u56db\u5c42\u534f\u8bae\u7684\u8f6c\u53d1\u3001\u4ee3\u7406\u6216\u8005\u8d1f\u8f7d\u5747\u8861\u7b49\u3002\u7528\u6cd5\u662f\u76f4\u63a5\u5728 nginx.conf \u4e2d\u914d\u7f6e stream \u5b57\u6bb5\u3002 \u4f46\u662f\u5b9e\u9645\u914d\u7f6e\u5b8c\u6210\u540e\u53d1\u73b0\uff0cnginx \u5e76\u4e0d\u8ba4\u8bc6 stream \u6a21\u5757\u3002\u4f7f\u7528 nginx -t \u68c0\u67e5\u914d\u7f6e\u65e0\u6cd5\u901a\u8fc7\u3002\u62a5\u9519\u63d0\u793a unknown directive \"stream\" in /etc/nginx/nginx.conf \u3002 \u540e\u6765\u4e86\u89e3\u5230\uff0c\u5982\u679c\u9700\u8981\u4f7f nginx \u5185\u7f6e\u652f\u6301 stream \u6a21\u5757\uff0c\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u6307\u5b9a --with-stream \u9009\u9879\u3002\u5373 ./configure --with-stream \u5b98\u7f51\u7684\u8bf4\u6cd5 \u8fd9\u4e2a\u65b9\u6cd5\u5b9e\u5c5e\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u8fd8\u8981\u91cd\u88c5 nginx\u3002","title":"\u521d\u6b21\u5c1d\u8bd5"},{"location":"blog/2022/220406-nginx-stream/#_3","text":"\u4ece\u8fd9\u7bc7\u6587\u7ae0\u4e86\u89e3\u5230\u4e86\u4e0d\u7528\u91cd\u65b0\u7f16\u8bd1\u4e5f\u80fd\u652f\u6301 stream \u6a21\u5757\u7684\u65b9\u6cd5\uff1a unknown directive \"stream\" in /etc/nginx/nginx.conf:86 - Server Fault \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u5728\u7f16\u8bd1\u65f6\u6307\u5b9a --with-stream \u9009\u9879\uff0cnginx \u4e5f\u4f1a\u5c06 stream \u6a21\u5757\u7f16\u8bd1\u8fdb\u6765\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8ba9 nginx \u9ed8\u8ba4\u652f\u6301\uff0c\u800c\u662f\u9700\u8981\u6211\u4eec\u81ea\u884c\u5bfc\u5165\uff0c\u5373\uff1a load_module /usr/lib/nginx/modules/ngx_stream_module.so ; \u5982\u6b64\u4e00\u6765\u4fbf\u80fd\u6b63\u5e38\u4f7f\u7528 stream \u6a21\u5757\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"blog/2022/220406-set-http-proxy/","tags":["python","pip","proxy"],"text":"\u95ee\u9898 \u5f00\u542f\u7cfb\u7edf\u4ee3\u7406\u540e\uff0c\u5f53\u4f7f\u7528 pip \u5b89\u88c5\u5305\u65f6\uff0c\u4f1a\u62a5\u9519\uff1a ValueError: check_hostname requires server_hostname \u4ee5\u53ca\u4f7f\u7528\u67d0\u4e9b\u7f51\u7edc\u64cd\u4f5c\u5e93\u65f6\uff08\u6bd4\u5982 requests \uff09\u4e5f\u4f1a\u62a5\u8fd9\u4e2a\u9519\u3002 \u89e3\u51b3\u65b9\u6cd5 \u5728\u63a7\u5236\u53f0\u8fd0\u884c python \u811a\u672c\u524d\u5148\u6307\u5b9a\u4ee3\u7406\u5730\u5740\uff1a set http_proxy=http://127.0.0.1:8889 set https_proxy=http://127.0.0.1:8889 \u5176\u4e2d 127.0.0.1:8889 \u662f\u4ee3\u7406\u670d\u52a1\u5668\u7684\u5730\u5740","title":"\u89e3\u51b3\u4f7f\u7528\u4ee3\u7406\u540e pip \u548c python \u65e0\u6cd5\u8fde\u63a5\u5230\u7f51\u7edc\u7684\u95ee\u9898"},{"location":"blog/2022/220406-set-http-proxy/#_1","text":"\u5f00\u542f\u7cfb\u7edf\u4ee3\u7406\u540e\uff0c\u5f53\u4f7f\u7528 pip \u5b89\u88c5\u5305\u65f6\uff0c\u4f1a\u62a5\u9519\uff1a ValueError: check_hostname requires server_hostname \u4ee5\u53ca\u4f7f\u7528\u67d0\u4e9b\u7f51\u7edc\u64cd\u4f5c\u5e93\u65f6\uff08\u6bd4\u5982 requests \uff09\u4e5f\u4f1a\u62a5\u8fd9\u4e2a\u9519\u3002","title":"\u95ee\u9898"},{"location":"blog/2022/220406-set-http-proxy/#_2","text":"\u5728\u63a7\u5236\u53f0\u8fd0\u884c python \u811a\u672c\u524d\u5148\u6307\u5b9a\u4ee3\u7406\u5730\u5740\uff1a set http_proxy=http://127.0.0.1:8889 set https_proxy=http://127.0.0.1:8889 \u5176\u4e2d 127.0.0.1:8889 \u662f\u4ee3\u7406\u670d\u52a1\u5668\u7684\u5730\u5740","title":"\u89e3\u51b3\u65b9\u6cd5"},{"location":"blog/2022/220406-venv-move-file/","tags":["python","venv","pycharm","pip"],"text":"\u80cc\u666f \u56e0\u4e3a\u9879\u76ee\u9700\u8981\uff0c\u5c06\u90e8\u5206 python \u9879\u76ee\u79fb\u52a8\u5230\u4e86\u5176\u4ed6\u6587\u4ef6\u5939\uff0c\u5bfc\u81f4\u5728 PyCharm \u4e2d\u627e\u4e0d\u5230\u89e3\u91ca\u5668\uff0c\u4e5f\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u7ec8\u7aef\u3002 \u73b0\u8c61 \u6211\u4f7f\u7528\u7684 IDE \u662f PyCharm \u4e13\u4e1a\u7248 2021.3.2 \uff0c\u5177\u4f53\u8868\u73b0\u4e3a\u5728 IDE \u5185\u6253\u5f00\u7ec8\u7aef\u540e\uff1a PyCharm \u627e\u4e0d\u5230\u89e3\u91ca\u5668 \u7ec8\u7aef\u5185\u6267\u884c python \u7a0b\u5e8f\u53ea\u80fd\u591f\u4f7f\u7528\u5168\u5c40\u5305 \u65e0\u6cd5\u8fdb\u5165 venv \u73af\u5883\uff08\u5305\u62ec PyCharm \u81ea\u52a8\u8fdb\u5165\u548c\u624b\u52a8\u8fdb\u5165\uff09 \u65e0\u6cd5\u4f7f\u7528 pip \u89e3\u51b3 \u627e\u4e0d\u5230\u89e3\u91ca\u5668 \u8fd9\u4e2a\u95ee\u9898\u597d\u89e3\u51b3\uff0cPyCharm \u4f1a\u81ea\u52a8\u68c0\u6d4b\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 venv \u6587\u4ef6\u5939\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u4f1a\u5c06 venv/Scripts/python \u8bbe\u7f6e\u4e3a\u89e3\u91ca\u5668\u3002\u95ee\u9898\u76f4\u63a5\u89e3\u51b3\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u79fb\u52a8\u4e86 python \u9879\u76ee\u6587\u4ef6\u5939\u7684\uff0c\u56e0\u6b64\u539f\u6765\u7684\u89e3\u91ca\u5668\u8def\u5f84\u8fd8\u4fdd\u7559\u5728 PyCharm \u5185\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5c06\u5176\u5220\u9664\u3002\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff1a \u627e\u5230 \u6587\u4ef6 -> \u8bbe\u7f6e -> \u9879\u76ee -> Python \u89e3\u91ca\u5668 \u9009\u62e9\u5f53\u524d\u89e3\u91ca\u5668\u53f3\u8fb9\u7684\u9f7f\u8f6e\u56fe\u6807\uff0c\u70b9\u51fb \u5168\u90e8\u663e\u793a \uff0c\u627e\u5230\u7ea2\u8272\u6807\u8bb0\u7684\u89e3\u91ca\u5668\uff0c\u70b9\u51fb\u5220\u9664\u5373\u53ef\u3002 \u7ec8\u7aef\u53ea\u80fd\u591f\u4f7f\u7528\u5168\u5c40\u5305\u4e0e\u65e0\u6cd5\u8fdb\u5165 venv \u73af\u5883 \u5177\u4f53\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8868\u73b0\uff1a \u81ea\u5df1\u7684\u5b9e\u9645\u9879\u76ee\u4e2d\u6709\u7b2c\u4e09\u65b9\u5e93\uff08\u4f8b\u5982 aiohttp \uff09\uff0c\u9879\u76ee\u6587\u4ef6\u76f4\u63a5\u53f3\u952e\u8fd0\u884c\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u4f46\u662f\u5728\u7ec8\u7aef\u91cc\u9762\u6267\u884c\u65f6\u4f1a\u62a5\u9519\uff0c\u63d0\u793a ModuleNotFoundError: No module named 'aiohttp' \u3002 \u7ec8\u7aef\u91cc\u76f4\u63a5\u6267\u884c where python \u663e\u793a\u7684\u662f\u5168\u5c40 python \u8def\u5f84\uff0c\u800c\u4e0d\u662f venv \u4e2d\u7684\u8def\u5f84\u3002 \u7ec8\u7aef\u91cc\u76f4\u63a5\u6267\u884c pip list \u4f1a\u63d0\u793a\u53ea\u6709 pip \u548c setuptools \u4e24\u4e2a\u5305\uff0c\u800c\u6211\u4eec\u9879\u76ee\u91cc\u4f9d\u8d56\u7684\u5305\u4e00\u4e2a\u90fd\u6ca1\u6709\u3002 \u539f\u56e0\u5728\u4e8e PyCharm \u81ea\u52a8\u8fdb\u5165 venv \u73af\u5883\u7684\u65f6\u5019\u662f\u4ece venv/Scripts/activate.bat \u8fdb\u5165\u7684\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5b9a\u4e49\u4e86 %PATH% \uff0c\u5f53\u6211\u4eec\u5df2\u7ecf\u79fb\u52a8\u4e86\u9879\u76ee\u6587\u4ef6\u5939\u540e\uff0c activate.bat \u91cc\u8bb0\u5f55\u7684\u8def\u5f84\u5e76\u6ca1\u6709\u6539\uff0c\u800c\u539f\u6765\u7684\u8def\u5f84\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u653e\u5728 venv \u4e0b\u7684 python.exe \u5e76\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u5165\u5230 %PATH% \u4e2d\u3002 \u89e3\u51b3\u65b9\u5f0f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u7f16\u8f91 venv/Scripts/activate.bat \u6587\u4ef6\uff0clinux \u540c\u7406\u3002 CMD Bash FishShell Xonsh activate.bat 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 @ echo off set \"VIRTUAL_ENV=I:\\Developer\\web\\blog_mkdocs\\venv\" if defined _OLD_VIRTUAL_PROMPT ( set \"PROMPT= %_OLD_VIRTUAL_PROMPT% \" ) else ( if not defined PROMPT ( set \"PROMPT=$P$G\" ) if not defined VIRTUAL_ENV_DISABLE_PROMPT ( set \"_OLD_VIRTUAL_PROMPT= %PROMPT% \" ) ) if not defined VIRTUAL_ENV_DISABLE_PROMPT ( set \"ENV_PROMPT=\" if NOT DEFINED ENV_PROMPT ( for %% d in ( \" %VIRTUAL_ENV% \" ) do set \"ENV_PROMPT=( %% ~nxd) \" ) ) set \"PROMPT= %ENV_PROMPT%%PROMPT% \" ) REM Don't use () to avoid problems with them in %PATH% if defined _OLD_VIRTUAL_PYTHONHOME goto ENDIFVHOME set \"_OLD_VIRTUAL_PYTHONHOME= %PYTHONHOME% \" : ENDIFVHOME set PYTHONHOME = REM if defined _OLD_VIRTUAL_PATH ( if not defined _OLD_VIRTUAL_PATH goto ENDIFVPATH1 set \"PATH= %_OLD_VIRTUAL_PATH% \" : ENDIFVPATH1 REM ) else ( if defined _OLD_VIRTUAL_PATH goto ENDIFVPATH2 set \"_OLD_VIRTUAL_PATH= %PATH% \" : ENDIFVPATH2 set \"PATH= %VIRTUAL_ENV% \\Scripts; %PATH% \" activate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 # This file must be used with \"source bin/activate\" *from bash* # you cannot run it directly if [ \" ${ BASH_SOURCE - } \" = \" $0 \" ] ; then echo \"You must source this script: \\$ source $0 \" > & 2 exit 33 fi deactivate () { unset -f pydoc >/dev/null 2 > & 1 || true # reset old environment variables # ! [ -z ${VAR+_} ] returns true if VAR is declared at all if ! [ -z \" ${ _OLD_VIRTUAL_PATH :+_ } \" ] ; then PATH = \" $_OLD_VIRTUAL_PATH \" export PATH unset _OLD_VIRTUAL_PATH fi if ! [ -z \" ${ _OLD_VIRTUAL_PYTHONHOME +_ } \" ] ; then PYTHONHOME = \" $_OLD_VIRTUAL_PYTHONHOME \" export PYTHONHOME unset _OLD_VIRTUAL_PYTHONHOME fi # The hash command must be called to get it to forget past # commands. Without forgetting past commands the $PATH changes # we made may not be respected hash -r 2 >/dev/null if ! [ -z \" ${ _OLD_VIRTUAL_PS1 +_ } \" ] ; then PS1 = \" $_OLD_VIRTUAL_PS1 \" export PS1 unset _OLD_VIRTUAL_PS1 fi unset VIRTUAL_ENV if [ ! \" ${ 1 - } \" = \"nondestructive\" ] ; then # Self destruct! unset -f deactivate fi } # unset irrelevant variables deactivate nondestructive VIRTUAL_ENV = 'I:\\Developer\\web\\blog_mkdocs\\venv' if ([ \" $OSTYPE \" = \"cygwin\" ] || [ \" $OSTYPE \" = \"msys\" ]) && $( command -v cygpath & > /dev/null ) ; then VIRTUAL_ENV = $( cygpath -u \" $VIRTUAL_ENV \" ) fi export VIRTUAL_ENV _OLD_VIRTUAL_PATH = \" $PATH \" PATH = \" $VIRTUAL_ENV /Scripts: $PATH \" export PATH # unset PYTHONHOME if set if ! [ -z \" ${ PYTHONHOME +_ } \" ] ; then _OLD_VIRTUAL_PYTHONHOME = \" $PYTHONHOME \" unset PYTHONHOME fi if [ -z \" ${ VIRTUAL_ENV_DISABLE_PROMPT - } \" ] ; then _OLD_VIRTUAL_PS1 = \" ${ PS1 - } \" if [ \"x\" ! = x ] ; then PS1 = \" ${ PS1 - } \" else PS1 = \"(`basename \\\" $VIRTUAL_ENV \\\"`) ${ PS1 - } \" fi export PS1 fi # Make sure to unalias pydoc if it's already there alias pydoc 2 >/dev/null >/dev/null && unalias pydoc || true pydoc () { python -m pydoc \" $@ \" } # The hash command must be called to get it to forget past # commands. Without forgetting past commands the $PATH changes # we made may not be respected hash -r 2 >/dev/null activate.fish 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 # This file must be used using `source bin/activate.fish` *within a running fish ( http://fishshell.com ) session*. # Do not run it directly. function _bashify_path -d \"Converts a fish path to something bash can recognize\" set fishy_path $argv set bashy_path $fishy_path [ 1 ] for path_part in $fishy_path [ 2..-1 ] set bashy_path \" $bashy_path : $path_part \" end echo $bashy_path end function _fishify_path -d \"Converts a bash path to something fish can recognize\" echo $argv | tr ':' '\\n' end function deactivate -d 'Exit virtualenv mode and return to the normal environment.' # reset old environment variables if test -n \" $_OLD_VIRTUAL_PATH \" # https://github.com/fish-shell/fish-shell/issues/436 altered PATH handling if test ( echo $FISH_VERSION | head -c 1 ) -lt 3 set -gx PATH ( _fishify_path \" $_OLD_VIRTUAL_PATH \" ) else set -gx PATH \" $_OLD_VIRTUAL_PATH \" end set -e _OLD_VIRTUAL_PATH end if test -n \" $_OLD_VIRTUAL_PYTHONHOME \" set -gx PYTHONHOME \" $_OLD_VIRTUAL_PYTHONHOME \" set -e _OLD_VIRTUAL_PYTHONHOME end if test -n \" $_OLD_FISH_PROMPT_OVERRIDE \" and functions -q _old_fish_prompt # Set an empty local `$fish_function_path` to allow the removal of `fish_prompt` using `functions -e`. set -l fish_function_path # Erase virtualenv's `fish_prompt` and restore the original. functions -e fish_prompt functions -c _old_fish_prompt fish_prompt functions -e _old_fish_prompt set -e _OLD_FISH_PROMPT_OVERRIDE end set -e VIRTUAL_ENV if test \" $argv [1]\" ! = 'nondestructive' # Self-destruct! functions -e pydoc functions -e deactivate functions -e _bashify_path functions -e _fishify_path end end # Unset irrelevant variables. deactivate nondestructive set -gx VIRTUAL_ENV 'I:\\Developer\\web\\blog_mkdocs\\venv' # https://github.com/fish-shell/fish-shell/issues/436 altered PATH handling if test ( echo $FISH_VERSION | head -c 1 ) -lt 3 set -gx _OLD_VIRTUAL_PATH ( _bashify_path $PATH ) else set -gx _OLD_VIRTUAL_PATH \" $PATH \" end set -gx PATH \" $VIRTUAL_ENV \" '/Scripts' $PATH # Unset `$PYTHONHOME` if set. if set -q PYTHONHOME set -gx _OLD_VIRTUAL_PYTHONHOME $PYTHONHOME set -e PYTHONHOME end function pydoc python -m pydoc $argv end if test -z \" $VIRTUAL_ENV_DISABLE_PROMPT \" # Copy the current `fish_prompt` function as `_old_fish_prompt`. functions -c fish_prompt _old_fish_prompt function fish_prompt # Run the user's prompt first; it might depend on (pipe)status. set -l prompt ( _old_fish_prompt ) # Prompt override provided? # If not, just prepend the environment name. if test -n '' printf '%s%s' '' ( set_color normal ) else printf '%s(%s) ' ( set_color normal ) ( basename \" $VIRTUAL_ENV \" ) end string join -- \\n $prompt # handle multi-line prompts end set -gx _OLD_FISH_PROMPT_OVERRIDE \" $VIRTUAL_ENV \" end activate.xsh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \"\"\"Xonsh activate script for virtualenv\"\"\" from xonsh.tools import get_sep as _get_sep def _deactivate(args): if \"pydoc\" in aliases: del aliases[\"pydoc\"] if ${...}.get(\"_OLD_VIRTUAL_PATH\", \"\"): $PATH = $_OLD_VIRTUAL_PATH del $_OLD_VIRTUAL_PATH if ${...}.get(\"_OLD_VIRTUAL_PYTHONHOME\", \"\"): $PYTHONHOME = $_OLD_VIRTUAL_PYTHONHOME del $_OLD_VIRTUAL_PYTHONHOME if \"VIRTUAL_ENV\" in ${...}: del $VIRTUAL_ENV if \"VIRTUAL_ENV_PROMPT\" in ${...}: del $VIRTUAL_ENV_PROMPT if \"nondestructive\" not in args: # Self destruct! del aliases[\"deactivate\"] # unset irrelevant variables _deactivate([\"nondestructive\"]) aliases[\"deactivate\"] = _deactivate $VIRTUAL_ENV = r\"I:\\Developer\\web\\blog_mkdocs\\venv\" $_OLD_VIRTUAL_PATH = $PATH $PATH = $PATH[:] $PATH.add($VIRTUAL_ENV + _get_sep() + \"Scripts\", front=True, replace=True) if ${...}.get(\"PYTHONHOME\", \"\"): # unset PYTHONHOME if set $_OLD_VIRTUAL_PYTHONHOME = $PYTHONHOME del $PYTHONHOME $VIRTUAL_ENV_PROMPT = \"\" if not $VIRTUAL_ENV_PROMPT: del $VIRTUAL_ENV_PROMPT aliases[\"pydoc\"] = [\"python\", \"-m\", \"pydoc\"] \u65e0\u6cd5\u4f7f\u7528 pip \u901a\u8fc7\u4fee\u6539 activate.bat \u4f7f\u5f97\u80fd\u6b63\u5e38\u8fdb\u5165 venv \u73af\u5883\u540e\uff0c\u4f1a\u8fce\u6765\u7b2c\u4e09\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u65e0\u6cd5\u4f7f\u7528 pip \u5b89\u88c5\u5305\u3002 \u5177\u4f53\u8868\u73b0\u4e3a\uff0c\u4f7f\u7528 pip \u547d\u4ee4\u540e\uff0c\u7ec8\u7aef\u4f1a\u62a5\u9519\uff1a Fatal error in launcher: unable to create process using: 'XXXXXXX/python.exe' 'XXXXXXXXX/pip.exe' \u3002 \u6211\u4e00\u770b\uff0c\u8fd9\u4e2a\u6240\u8c13\u7684 'XXXXXXX/python.exe' \u6b63\u662f\u6211\u4eec\u5728\u79fb\u52a8\u9879\u76ee\u6587\u4ef6\u4e4b\u524d\u7684 venv \u7684 python \u8def\u5f84\uff0c\u53ef\u662f\u6211\u4eec\u5df2\u7ecf\u4fee\u6539\u4e86 activate.bat \u4e2d\u7684\u8def\u5f84\uff0c\u600e\u4e48\u8fd8\u662f\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u5462\u3002 \u53c2\u8003\u4e86 Fatal error in launcher: Unable to create process using \u8fd9\u7bc7\u6587\u7ae0\uff0c\u4e86\u89e3\u5230 pip.exe \u540c\u6837\u4e5f\u4fdd\u5b58\u4e86\u8def\u5f84\uff0c\u800c\u4e14\u5c31\u4fdd\u5b58\u5728 pip.exe \u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u91cc\uff0c\u5982\u679c\u60f3\u8981\u4fee\u6539\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c\u7528 WinHex \u8fd9\u7c7b\u5de5\u5177\u6539\u5c31\u884c\u3002 \u4f46\u662f\u6211\u4eec\u6ca1\u5fc5\u8981\u8fd9\u4e48\u9ebb\u70e6\uff0c\u6211\u7684\u5efa\u8bae\u662f\u76f4\u63a5\u539f\u5730\u91cd\u88c5 pip \uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u9996\u5148\u6709\u4e86\u4e0a\u4e00\u6b65\u7684\u94fa\u57ab\uff0c\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u8fdb\u5165 venv\uff0c\u90a3\u4e48\u8fdb\u5165 venv I : \\Developer\\web\\blog_mkdocs\\venv\\Scripts\\activate.bat \u7136\u540e\u91cd\u88c5 pip \uff08\u6ce8\u610f\u6b64\u65f6\u4f60\u5df2\u7ecf\u5728 venv \u91cc\u4e86\uff09 python -m pip install --upgrade --force-reinstall pip \u6b64\u65f6\uff0c\u8be5 venv \u91cc\u7684 pip \u5e94\u8be5\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u3002 \u540c\u7406\uff0c\u7ee7\u7eed\u68c0\u67e5 venv/Scripts \u4e0b\u7684\u5176\u4ed6\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4f8b\u5982 mkdocs.exe \uff0c\u8fd9\u4e9b\u90fd\u8981\u901a\u8fc7\u76f8\u540c\u65b9\u5f0f\u91cd\u88c5\u624d\u80fd\u6b63\u5e38\u7528\u3002 pip install --upgrade --force-reinstall mkdocs","title":"\u79fb\u52a8 python \u9879\u76ee\u6587\u4ef6\u5939\u4f4d\u7f6e\u540e\u5982\u4f55\u89e3\u51b3 PyCharm \u627e\u4e0d\u5230\u89e3\u91ca\u5668\u4e0e\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u7ec8\u7aef\u7684\u95ee\u9898"},{"location":"blog/2022/220406-venv-move-file/#_1","text":"\u56e0\u4e3a\u9879\u76ee\u9700\u8981\uff0c\u5c06\u90e8\u5206 python \u9879\u76ee\u79fb\u52a8\u5230\u4e86\u5176\u4ed6\u6587\u4ef6\u5939\uff0c\u5bfc\u81f4\u5728 PyCharm \u4e2d\u627e\u4e0d\u5230\u89e3\u91ca\u5668\uff0c\u4e5f\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u7ec8\u7aef\u3002","title":"\u80cc\u666f"},{"location":"blog/2022/220406-venv-move-file/#_2","text":"\u6211\u4f7f\u7528\u7684 IDE \u662f PyCharm \u4e13\u4e1a\u7248 2021.3.2 \uff0c\u5177\u4f53\u8868\u73b0\u4e3a\u5728 IDE \u5185\u6253\u5f00\u7ec8\u7aef\u540e\uff1a PyCharm \u627e\u4e0d\u5230\u89e3\u91ca\u5668 \u7ec8\u7aef\u5185\u6267\u884c python \u7a0b\u5e8f\u53ea\u80fd\u591f\u4f7f\u7528\u5168\u5c40\u5305 \u65e0\u6cd5\u8fdb\u5165 venv \u73af\u5883\uff08\u5305\u62ec PyCharm \u81ea\u52a8\u8fdb\u5165\u548c\u624b\u52a8\u8fdb\u5165\uff09 \u65e0\u6cd5\u4f7f\u7528 pip","title":"\u73b0\u8c61"},{"location":"blog/2022/220406-venv-move-file/#_3","text":"","title":"\u89e3\u51b3"},{"location":"blog/2022/220406-venv-move-file/#_4","text":"\u8fd9\u4e2a\u95ee\u9898\u597d\u89e3\u51b3\uff0cPyCharm \u4f1a\u81ea\u52a8\u68c0\u6d4b\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 venv \u6587\u4ef6\u5939\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u4f1a\u5c06 venv/Scripts/python \u8bbe\u7f6e\u4e3a\u89e3\u91ca\u5668\u3002\u95ee\u9898\u76f4\u63a5\u89e3\u51b3\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u79fb\u52a8\u4e86 python \u9879\u76ee\u6587\u4ef6\u5939\u7684\uff0c\u56e0\u6b64\u539f\u6765\u7684\u89e3\u91ca\u5668\u8def\u5f84\u8fd8\u4fdd\u7559\u5728 PyCharm \u5185\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5c06\u5176\u5220\u9664\u3002\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff1a \u627e\u5230 \u6587\u4ef6 -> \u8bbe\u7f6e -> \u9879\u76ee -> Python \u89e3\u91ca\u5668 \u9009\u62e9\u5f53\u524d\u89e3\u91ca\u5668\u53f3\u8fb9\u7684\u9f7f\u8f6e\u56fe\u6807\uff0c\u70b9\u51fb \u5168\u90e8\u663e\u793a \uff0c\u627e\u5230\u7ea2\u8272\u6807\u8bb0\u7684\u89e3\u91ca\u5668\uff0c\u70b9\u51fb\u5220\u9664\u5373\u53ef\u3002","title":"\u627e\u4e0d\u5230\u89e3\u91ca\u5668"},{"location":"blog/2022/220406-venv-move-file/#venv","text":"\u5177\u4f53\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8868\u73b0\uff1a \u81ea\u5df1\u7684\u5b9e\u9645\u9879\u76ee\u4e2d\u6709\u7b2c\u4e09\u65b9\u5e93\uff08\u4f8b\u5982 aiohttp \uff09\uff0c\u9879\u76ee\u6587\u4ef6\u76f4\u63a5\u53f3\u952e\u8fd0\u884c\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u4f46\u662f\u5728\u7ec8\u7aef\u91cc\u9762\u6267\u884c\u65f6\u4f1a\u62a5\u9519\uff0c\u63d0\u793a ModuleNotFoundError: No module named 'aiohttp' \u3002 \u7ec8\u7aef\u91cc\u76f4\u63a5\u6267\u884c where python \u663e\u793a\u7684\u662f\u5168\u5c40 python \u8def\u5f84\uff0c\u800c\u4e0d\u662f venv \u4e2d\u7684\u8def\u5f84\u3002 \u7ec8\u7aef\u91cc\u76f4\u63a5\u6267\u884c pip list \u4f1a\u63d0\u793a\u53ea\u6709 pip \u548c setuptools \u4e24\u4e2a\u5305\uff0c\u800c\u6211\u4eec\u9879\u76ee\u91cc\u4f9d\u8d56\u7684\u5305\u4e00\u4e2a\u90fd\u6ca1\u6709\u3002 \u539f\u56e0\u5728\u4e8e PyCharm \u81ea\u52a8\u8fdb\u5165 venv \u73af\u5883\u7684\u65f6\u5019\u662f\u4ece venv/Scripts/activate.bat \u8fdb\u5165\u7684\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5b9a\u4e49\u4e86 %PATH% \uff0c\u5f53\u6211\u4eec\u5df2\u7ecf\u79fb\u52a8\u4e86\u9879\u76ee\u6587\u4ef6\u5939\u540e\uff0c activate.bat \u91cc\u8bb0\u5f55\u7684\u8def\u5f84\u5e76\u6ca1\u6709\u6539\uff0c\u800c\u539f\u6765\u7684\u8def\u5f84\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u653e\u5728 venv \u4e0b\u7684 python.exe \u5e76\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u5165\u5230 %PATH% \u4e2d\u3002 \u89e3\u51b3\u65b9\u5f0f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u7f16\u8f91 venv/Scripts/activate.bat \u6587\u4ef6\uff0clinux \u540c\u7406\u3002 CMD Bash FishShell Xonsh activate.bat 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 @ echo off set \"VIRTUAL_ENV=I:\\Developer\\web\\blog_mkdocs\\venv\" if defined _OLD_VIRTUAL_PROMPT ( set \"PROMPT= %_OLD_VIRTUAL_PROMPT% \" ) else ( if not defined PROMPT ( set \"PROMPT=$P$G\" ) if not defined VIRTUAL_ENV_DISABLE_PROMPT ( set \"_OLD_VIRTUAL_PROMPT= %PROMPT% \" ) ) if not defined VIRTUAL_ENV_DISABLE_PROMPT ( set \"ENV_PROMPT=\" if NOT DEFINED ENV_PROMPT ( for %% d in ( \" %VIRTUAL_ENV% \" ) do set \"ENV_PROMPT=( %% ~nxd) \" ) ) set \"PROMPT= %ENV_PROMPT%%PROMPT% \" ) REM Don't use () to avoid problems with them in %PATH% if defined _OLD_VIRTUAL_PYTHONHOME goto ENDIFVHOME set \"_OLD_VIRTUAL_PYTHONHOME= %PYTHONHOME% \" : ENDIFVHOME set PYTHONHOME = REM if defined _OLD_VIRTUAL_PATH ( if not defined _OLD_VIRTUAL_PATH goto ENDIFVPATH1 set \"PATH= %_OLD_VIRTUAL_PATH% \" : ENDIFVPATH1 REM ) else ( if defined _OLD_VIRTUAL_PATH goto ENDIFVPATH2 set \"_OLD_VIRTUAL_PATH= %PATH% \" : ENDIFVPATH2 set \"PATH= %VIRTUAL_ENV% \\Scripts; %PATH% \" activate 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 # This file must be used with \"source bin/activate\" *from bash* # you cannot run it directly if [ \" ${ BASH_SOURCE - } \" = \" $0 \" ] ; then echo \"You must source this script: \\$ source $0 \" > & 2 exit 33 fi deactivate () { unset -f pydoc >/dev/null 2 > & 1 || true # reset old environment variables # ! [ -z ${VAR+_} ] returns true if VAR is declared at all if ! [ -z \" ${ _OLD_VIRTUAL_PATH :+_ } \" ] ; then PATH = \" $_OLD_VIRTUAL_PATH \" export PATH unset _OLD_VIRTUAL_PATH fi if ! [ -z \" ${ _OLD_VIRTUAL_PYTHONHOME +_ } \" ] ; then PYTHONHOME = \" $_OLD_VIRTUAL_PYTHONHOME \" export PYTHONHOME unset _OLD_VIRTUAL_PYTHONHOME fi # The hash command must be called to get it to forget past # commands. Without forgetting past commands the $PATH changes # we made may not be respected hash -r 2 >/dev/null if ! [ -z \" ${ _OLD_VIRTUAL_PS1 +_ } \" ] ; then PS1 = \" $_OLD_VIRTUAL_PS1 \" export PS1 unset _OLD_VIRTUAL_PS1 fi unset VIRTUAL_ENV if [ ! \" ${ 1 - } \" = \"nondestructive\" ] ; then # Self destruct! unset -f deactivate fi } # unset irrelevant variables deactivate nondestructive VIRTUAL_ENV = 'I:\\Developer\\web\\blog_mkdocs\\venv' if ([ \" $OSTYPE \" = \"cygwin\" ] || [ \" $OSTYPE \" = \"msys\" ]) && $( command -v cygpath & > /dev/null ) ; then VIRTUAL_ENV = $( cygpath -u \" $VIRTUAL_ENV \" ) fi export VIRTUAL_ENV _OLD_VIRTUAL_PATH = \" $PATH \" PATH = \" $VIRTUAL_ENV /Scripts: $PATH \" export PATH # unset PYTHONHOME if set if ! [ -z \" ${ PYTHONHOME +_ } \" ] ; then _OLD_VIRTUAL_PYTHONHOME = \" $PYTHONHOME \" unset PYTHONHOME fi if [ -z \" ${ VIRTUAL_ENV_DISABLE_PROMPT - } \" ] ; then _OLD_VIRTUAL_PS1 = \" ${ PS1 - } \" if [ \"x\" ! = x ] ; then PS1 = \" ${ PS1 - } \" else PS1 = \"(`basename \\\" $VIRTUAL_ENV \\\"`) ${ PS1 - } \" fi export PS1 fi # Make sure to unalias pydoc if it's already there alias pydoc 2 >/dev/null >/dev/null && unalias pydoc || true pydoc () { python -m pydoc \" $@ \" } # The hash command must be called to get it to forget past # commands. Without forgetting past commands the $PATH changes # we made may not be respected hash -r 2 >/dev/null activate.fish 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 # This file must be used using `source bin/activate.fish` *within a running fish ( http://fishshell.com ) session*. # Do not run it directly. function _bashify_path -d \"Converts a fish path to something bash can recognize\" set fishy_path $argv set bashy_path $fishy_path [ 1 ] for path_part in $fishy_path [ 2..-1 ] set bashy_path \" $bashy_path : $path_part \" end echo $bashy_path end function _fishify_path -d \"Converts a bash path to something fish can recognize\" echo $argv | tr ':' '\\n' end function deactivate -d 'Exit virtualenv mode and return to the normal environment.' # reset old environment variables if test -n \" $_OLD_VIRTUAL_PATH \" # https://github.com/fish-shell/fish-shell/issues/436 altered PATH handling if test ( echo $FISH_VERSION | head -c 1 ) -lt 3 set -gx PATH ( _fishify_path \" $_OLD_VIRTUAL_PATH \" ) else set -gx PATH \" $_OLD_VIRTUAL_PATH \" end set -e _OLD_VIRTUAL_PATH end if test -n \" $_OLD_VIRTUAL_PYTHONHOME \" set -gx PYTHONHOME \" $_OLD_VIRTUAL_PYTHONHOME \" set -e _OLD_VIRTUAL_PYTHONHOME end if test -n \" $_OLD_FISH_PROMPT_OVERRIDE \" and functions -q _old_fish_prompt # Set an empty local `$fish_function_path` to allow the removal of `fish_prompt` using `functions -e`. set -l fish_function_path # Erase virtualenv's `fish_prompt` and restore the original. functions -e fish_prompt functions -c _old_fish_prompt fish_prompt functions -e _old_fish_prompt set -e _OLD_FISH_PROMPT_OVERRIDE end set -e VIRTUAL_ENV if test \" $argv [1]\" ! = 'nondestructive' # Self-destruct! functions -e pydoc functions -e deactivate functions -e _bashify_path functions -e _fishify_path end end # Unset irrelevant variables. deactivate nondestructive set -gx VIRTUAL_ENV 'I:\\Developer\\web\\blog_mkdocs\\venv' # https://github.com/fish-shell/fish-shell/issues/436 altered PATH handling if test ( echo $FISH_VERSION | head -c 1 ) -lt 3 set -gx _OLD_VIRTUAL_PATH ( _bashify_path $PATH ) else set -gx _OLD_VIRTUAL_PATH \" $PATH \" end set -gx PATH \" $VIRTUAL_ENV \" '/Scripts' $PATH # Unset `$PYTHONHOME` if set. if set -q PYTHONHOME set -gx _OLD_VIRTUAL_PYTHONHOME $PYTHONHOME set -e PYTHONHOME end function pydoc python -m pydoc $argv end if test -z \" $VIRTUAL_ENV_DISABLE_PROMPT \" # Copy the current `fish_prompt` function as `_old_fish_prompt`. functions -c fish_prompt _old_fish_prompt function fish_prompt # Run the user's prompt first; it might depend on (pipe)status. set -l prompt ( _old_fish_prompt ) # Prompt override provided? # If not, just prepend the environment name. if test -n '' printf '%s%s' '' ( set_color normal ) else printf '%s(%s) ' ( set_color normal ) ( basename \" $VIRTUAL_ENV \" ) end string join -- \\n $prompt # handle multi-line prompts end set -gx _OLD_FISH_PROMPT_OVERRIDE \" $VIRTUAL_ENV \" end activate.xsh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \"\"\"Xonsh activate script for virtualenv\"\"\" from xonsh.tools import get_sep as _get_sep def _deactivate(args): if \"pydoc\" in aliases: del aliases[\"pydoc\"] if ${...}.get(\"_OLD_VIRTUAL_PATH\", \"\"): $PATH = $_OLD_VIRTUAL_PATH del $_OLD_VIRTUAL_PATH if ${...}.get(\"_OLD_VIRTUAL_PYTHONHOME\", \"\"): $PYTHONHOME = $_OLD_VIRTUAL_PYTHONHOME del $_OLD_VIRTUAL_PYTHONHOME if \"VIRTUAL_ENV\" in ${...}: del $VIRTUAL_ENV if \"VIRTUAL_ENV_PROMPT\" in ${...}: del $VIRTUAL_ENV_PROMPT if \"nondestructive\" not in args: # Self destruct! del aliases[\"deactivate\"] # unset irrelevant variables _deactivate([\"nondestructive\"]) aliases[\"deactivate\"] = _deactivate $VIRTUAL_ENV = r\"I:\\Developer\\web\\blog_mkdocs\\venv\" $_OLD_VIRTUAL_PATH = $PATH $PATH = $PATH[:] $PATH.add($VIRTUAL_ENV + _get_sep() + \"Scripts\", front=True, replace=True) if ${...}.get(\"PYTHONHOME\", \"\"): # unset PYTHONHOME if set $_OLD_VIRTUAL_PYTHONHOME = $PYTHONHOME del $PYTHONHOME $VIRTUAL_ENV_PROMPT = \"\" if not $VIRTUAL_ENV_PROMPT: del $VIRTUAL_ENV_PROMPT aliases[\"pydoc\"] = [\"python\", \"-m\", \"pydoc\"]","title":"\u7ec8\u7aef\u53ea\u80fd\u591f\u4f7f\u7528\u5168\u5c40\u5305\u4e0e\u65e0\u6cd5\u8fdb\u5165 venv \u73af\u5883"},{"location":"blog/2022/220406-venv-move-file/#pip","text":"\u901a\u8fc7\u4fee\u6539 activate.bat \u4f7f\u5f97\u80fd\u6b63\u5e38\u8fdb\u5165 venv \u73af\u5883\u540e\uff0c\u4f1a\u8fce\u6765\u7b2c\u4e09\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u65e0\u6cd5\u4f7f\u7528 pip \u5b89\u88c5\u5305\u3002 \u5177\u4f53\u8868\u73b0\u4e3a\uff0c\u4f7f\u7528 pip \u547d\u4ee4\u540e\uff0c\u7ec8\u7aef\u4f1a\u62a5\u9519\uff1a Fatal error in launcher: unable to create process using: 'XXXXXXX/python.exe' 'XXXXXXXXX/pip.exe' \u3002 \u6211\u4e00\u770b\uff0c\u8fd9\u4e2a\u6240\u8c13\u7684 'XXXXXXX/python.exe' \u6b63\u662f\u6211\u4eec\u5728\u79fb\u52a8\u9879\u76ee\u6587\u4ef6\u4e4b\u524d\u7684 venv \u7684 python \u8def\u5f84\uff0c\u53ef\u662f\u6211\u4eec\u5df2\u7ecf\u4fee\u6539\u4e86 activate.bat \u4e2d\u7684\u8def\u5f84\uff0c\u600e\u4e48\u8fd8\u662f\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u5462\u3002 \u53c2\u8003\u4e86 Fatal error in launcher: Unable to create process using \u8fd9\u7bc7\u6587\u7ae0\uff0c\u4e86\u89e3\u5230 pip.exe \u540c\u6837\u4e5f\u4fdd\u5b58\u4e86\u8def\u5f84\uff0c\u800c\u4e14\u5c31\u4fdd\u5b58\u5728 pip.exe \u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u91cc\uff0c\u5982\u679c\u60f3\u8981\u4fee\u6539\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c\u7528 WinHex \u8fd9\u7c7b\u5de5\u5177\u6539\u5c31\u884c\u3002 \u4f46\u662f\u6211\u4eec\u6ca1\u5fc5\u8981\u8fd9\u4e48\u9ebb\u70e6\uff0c\u6211\u7684\u5efa\u8bae\u662f\u76f4\u63a5\u539f\u5730\u91cd\u88c5 pip \uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u9996\u5148\u6709\u4e86\u4e0a\u4e00\u6b65\u7684\u94fa\u57ab\uff0c\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u8fdb\u5165 venv\uff0c\u90a3\u4e48\u8fdb\u5165 venv I : \\Developer\\web\\blog_mkdocs\\venv\\Scripts\\activate.bat \u7136\u540e\u91cd\u88c5 pip \uff08\u6ce8\u610f\u6b64\u65f6\u4f60\u5df2\u7ecf\u5728 venv \u91cc\u4e86\uff09 python -m pip install --upgrade --force-reinstall pip \u6b64\u65f6\uff0c\u8be5 venv \u91cc\u7684 pip \u5e94\u8be5\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u3002 \u540c\u7406\uff0c\u7ee7\u7eed\u68c0\u67e5 venv/Scripts \u4e0b\u7684\u5176\u4ed6\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4f8b\u5982 mkdocs.exe \uff0c\u8fd9\u4e9b\u90fd\u8981\u901a\u8fc7\u76f8\u540c\u65b9\u5f0f\u91cd\u88c5\u624d\u80fd\u6b63\u5e38\u7528\u3002 pip install --upgrade --force-reinstall mkdocs","title":"\u65e0\u6cd5\u4f7f\u7528 pip"}]}